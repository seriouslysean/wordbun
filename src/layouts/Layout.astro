---
import '~styles/global.css';
import '~styles/theme.css';

import Footer from '~components/Footer.astro';
import Header from '~components/Header.astro';
import SiteBreadcrumbs from '~components/SiteBreadcrumbs.astro';
import StructuredData from '~components/StructuredData.astro';
import type { WordData } from '~types';
import { getBuildData } from '~astro-utils/build-utils.ts';
import { getSocialImageUrl } from '~astro-utils/image-utils';
import { getMetaDescription, seoConfig } from '~astro-utils/seo-utils.ts';
import { getAsciiArt } from '~astro-utils/static-file-utils';
import { getFullUrl,getUrl } from '~astro-utils/url-utils';
import { extractWordDefinition,getWordsFromCollection } from '~astro-utils/word-data-utils';
import { t } from '~utils/i18n-utils';

const { title, word, description, structuredDataType, noindex, nofollow } = Astro.props;

const currentUrl = getFullUrl(Astro.url.pathname);
const pageTitle = title ? `${title} | ${seoConfig.siteName}` : seoConfig.defaultTitle;
const metaDescription = description || getMetaDescription();

const wordData = word || null;
const socialImageUrl = getSocialImageUrl({
  pathname: Astro.url.pathname,
  wordData,
});

const formatPageTitle = (pageTitle: string, currentWord: WordData) => {
  const today = new Date();
  const date = today.toLocaleDateString('en-US', {
	month: 'short',
	day: 'numeric',
	year: 'numeric',
  });

  if (currentWord?.word) {
	return `${currentWord.word}, ${date} - ${pageTitle}`;
  }

  return pageTitle;
};

const finalTitle = word ? formatPageTitle(pageTitle, word) : pageTitle;

// Get all words for build data using shared utility
const allWords = await getWordsFromCollection();
const buildData = getBuildData(allWords);

// Get ASCII art for HTML comment
const asciiArt = getAsciiArt();
const asciiComment = asciiArt ? `<!--

${asciiArt}

-->` : '';

// Generate color CSS variables using build-time constants
const colorPrimary = __COLOR_PRIMARY__;
const colorPrimaryLight = __COLOR_PRIMARY_LIGHT__;
const colorPrimaryDark = __COLOR_PRIMARY_DARK__;

const colorVariables = `--color-primary: ${colorPrimary}; --color-primary-light: ${colorPrimaryLight}; --color-primary-dark: ${colorPrimaryDark}; --color-white: #ffffff; --color-black: #000000; --color-text-primary: ${colorPrimary};`;

const wordSchemaData = word ? (() => {
  const { definition, partOfSpeech } = extractWordDefinition(word);

  return {
	word: word.word,
	date: word.date,
	definition,
	partOfSpeech,
	meta: null,
  };
})() : null;
---

<!doctype html>
<html lang={seoConfig.locale}>
  <head>
	<Fragment set:html={asciiComment} />
	<meta charset="UTF-8" />
	<meta name="viewport" content="width=device-width, initial-scale=1.0, shrink-to-fit=no, viewport-fit=cover" />
	<meta name="generator" content={Astro.generator} />

		<title>{finalTitle}</title>
		<meta name="description" content={metaDescription} />
		<meta name="keywords" content={seoConfig.keywords.join(', ')} />
		<meta name="author" content={seoConfig.author} />
		{noindex || nofollow ? (
			<meta name="robots" content={[noindex && 'noindex', nofollow && 'nofollow'].filter(Boolean).join(', ')} />
		) : null}
		<link rel="canonical" href={currentUrl} />

		<meta name="format-detection" content="telephone=no" />
		<meta name="theme-color" content="#121212" />
		<meta name="mobile-web-app-capable" content="yes" />
		<meta name="apple-mobile-web-app-capable" content="yes" />
		<meta name="apple-mobile-web-app-status-bar-style" content="black" />

		<meta name="educational-content" content="true" />
		<meta name="content-rating" content="educational" />
		<meta name="audience" content="students,educators,learners" />
		<meta name="subject" content="vocabulary,language-arts,english" />
		<meta name="education-level" content="all-ages" />
		<meta name="resource-type" content="educational-website" />

		<link rel="dns-prefetch" href="//api.wordnik.com" />

		<link rel="icon" type="image/svg+xml" href={getUrl('/favicon.svg')} />
		<link rel="manifest" href={getUrl('/manifest.json')} />

		<link type="text/plain" rel="author" href={getUrl('/humans.txt')} />
		<link type="text/plain" rel="llms" href={getUrl('/llms.txt')} />

		<link rel="alternate" hreflang={seoConfig.locale} href={currentUrl} />
		<link rel="alternate" hreflang="x-default" href={currentUrl} />
		<link rel="alternate" hreflang="en" href={currentUrl} />
		<meta property="og:locale" content={seoConfig.locale} />
		<meta http-equiv="content-language" content={seoConfig.locale.split('-')[0]} />

		<meta property="og:title" content={finalTitle} />
		<meta property="og:description" content={metaDescription} />
		<meta property="og:type" content="website" />
		<meta property="og:url" content={currentUrl} />
		<meta property="og:image" content={socialImageUrl} />
		<meta property="og:site_name" content={seoConfig.siteName} />
		<meta property="og:locale" content={seoConfig.locale} />

		<meta name="twitter:card" content="summary_large_image" />
		<meta name="twitter:title" content={finalTitle} />
		<meta name="twitter:description" content={metaDescription} />
		<meta name="twitter:image" content={socialImageUrl} />

		<StructuredData word={wordSchemaData} structuredDataType={structuredDataType} />

		{__GA_ENABLED__ && <script is:inline async src={`https://www.googletagmanager.com/gtag/js?id=${__GA_MEASUREMENT_ID__}`}></script>}
		{__GA_ENABLED__ && (
			<script is:inline define:vars={{ measurementId: __GA_MEASUREMENT_ID__ }}>
				window.dataLayer = window.dataLayer || [];
				function gtag(...args){
					dataLayer.push(args);
				}
				gtag('js', new Date());
				gtag('config', measurementId, {
					client_storage: 'none',
					anonymize_ip: true,
					allow_google_signals: false,
					allow_ad_personalization_signals: false,
});
</script>
		)}

		<style set:html={`:root { ${colorVariables} }`}></style>
		
		<!-- Speculation Rules for prefetching internal links on hover -->
		<script type="speculationrules" is:inline set:html={`{
		  "prefetch": [
			{
			  "source": "document",
			  "where": { "selector_matches": "a[href^='/']" },
			  "eagerness": "moderate"
			}
		  ]
		}`}></script>
  </head>
  <body class="layout">
	<a href="#main-content" class="skip-to-content">{t('common.skip_to_content')}</a>
	<Header />
	<main class="content" id="main-content">
	  <slot />
	</main>
	<SiteBreadcrumbs />
	<Footer />
	<script define:vars={{ buildData }} is:inline>
	  if (typeof window !== 'undefined' && !window.app) {
		window.app = buildData;
	  }
	</script>
  </body>
</html>

<style>
	html {
		background: linear-gradient(180deg,
			var(--color-background) 0%,
			var(--color-background-light) 100%);
	}

	body {
		margin: 0;
		-webkit-font-smoothing: antialiased;
	}

	.layout {
		min-height: 100vh;
		display: flex;
		flex-direction: column;
	}

	.content {
		flex: 1;
		width: 100%;
		max-width: var(--content-width-large);
		margin: 0 auto;
		padding: 1rem var(--spacing-base);
	}

	/* Large screens */
	/* Skip to content link */
	.skip-to-content {
		position: absolute;
		top: -40px;
		left: 6px;
		background: var(--color-primary);
		color: white;
		padding: 8px;
		text-decoration: none;
		border-radius: 4px;
		font-weight: 600;
		z-index: 1000;
		transition: top 0.2s;
		clip: rect(0 0 0 0);
		overflow: hidden;
	}

	.skip-to-content:focus {
		top: 6px;
		clip: auto;
		overflow: visible;
	}

	@media (min-width: 1025px) {
		.content {
			padding: 2rem var(--spacing-base);
		}
	}

</style>
