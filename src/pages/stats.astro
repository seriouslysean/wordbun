---
import DefinitionList from '~components/DefinitionList.astro';
import DescriptionText from '~components/DescriptionText.astro';
import StatsSection from '~components/StatsSection.astro';
import BarChart from '~components/BarChart.astro';
import { getPageMetadata } from '~astro-utils/page-metadata.ts';
import {
  getWordsUrl,
  getWordsLengthUrl,
  getSameStartEndUrl,
  getDoubleLettersUrl,
  getTripleLettersUrl,
  getAlphabeticalOrderUrl,
  getWordsEndingIngUrl,
  getWordsEndingEdUrl,
  getWordsEndingLyUrl,
  getWordsEndingNessUrl,
  getWordsEndingFulUrl,
  getWordsEndingLessUrl,
  getMilestoneWordsUrl,
  getCurrentStreakUrl,
  getLongestStreakUrl,
  getMostCommonLetterUrl,
  getLeastCommonLetterUrl,
  getPalindromesUrl,
  getAllConsonantsUrl,
  getAllVowelsUrl,
  getWordFactsUrl,
  getStreaksUrl,
  getLetterPatternsUrl,
  getWordEndingsUrl
} from '~astro-utils/url-utils';
import {
  getLetterStats,
  getLetterTypeStats,
  getPatternStats,
  getSyllableStats,
} from '~astro-utils/word-stats-utils';
import Heading from '~components/Heading.astro';
import Layout from '~layouts/Layout.astro';
import { countSyllables, getConsonantCount, getVowelCount } from '~utils/text-utils';
import { 
  allWords, 
  availableLengths,
  wordStats,
  letterPatternStats,
  wordEndingStats,
  streakStats,
  antiStreakStats,
  milestoneWords
} from '~astro-utils/word-data-utils';
import { t } from '~utils/i18n-utils';

const totalWords = allWords.length;
const firstWord = totalWords > 0 ? allWords[allWords.length - 1] : null;
const latestWord = totalWords > 0 ? allWords[0] : null;
const lengthCount = availableLengths.length;


const letterStats = getLetterStats(wordStats.letterFrequency);

const { mostSyllables, leastSyllables } = getSyllableStats(allWords);
const { mostVowels, mostConsonants } = getLetterTypeStats(allWords);
const { allVowels, allConsonants, palindromes } = getPatternStats(allWords);


const leastSyllablesCount = leastSyllables ? countSyllables(leastSyllables.word) : 0;
const mostSyllablesCount = mostSyllables ? countSyllables(mostSyllables.word) : 0;
const mostCommonLetter = letterStats.length > 0 ? letterStats[0][0] : '';
const mostCommonLetterCount = letterStats.length > 0 ? letterStats[0][1] : 0;
const leastCommonLetter = letterStats.length > 0 ? letterStats[letterStats.length - 1][0] : '';
const leastCommonLetterCount = letterStats.length > 0 ? letterStats[letterStats.length - 1][1] : 0;
const leastCommonLetterPlural = leastCommonLetterCount !== 1 ? 's' : '';
const mostVowelsCount = mostVowels ? getVowelCount(mostVowels.word) : 0;
const mostConsonantsCount = mostConsonants ? getConsonantCount(mostConsonants.word) : 0;
const palindromeCount = palindromes.length;
const milestoneCount = milestoneWords.length;

const letterPatternItems = [
  { key: 'startEndSame', label: t('stats.same_start_end'), count: letterPatternStats.startEndSame.length, href: getSameStartEndUrl() },
  { key: 'doubleLetters', label: t('stats.double_letters'), count: letterPatternStats.doubleLetters.length, href: getDoubleLettersUrl() },
  { key: 'tripleLetters', label: t('stats.triple_letters'), count: letterPatternStats.tripleLetters.length, href: getTripleLettersUrl() },
  { key: 'alphabetical', label: t('stats.alphabetical_order'), count: letterPatternStats.alphabetical.length, href: getAlphabeticalOrderUrl() },
].filter(item => item.count > 0);

const wordEndingItems = [
  { key: 'ing', label: t('stats.ing_words'), count: wordEndingStats.ing.length, href: getWordsEndingIngUrl() },
  { key: 'ed', label: t('stats.ed_words'), count: wordEndingStats.ed.length, href: getWordsEndingEdUrl() },
  { key: 'ly', label: t('stats.ly_words'), count: wordEndingStats.ly.length, href: getWordsEndingLyUrl() },
  { key: 'ness', label: t('stats.ness_words'), count: wordEndingStats.ness.length, href: getWordsEndingNessUrl() },
  { key: 'ful', label: t('stats.ful_words'), count: wordEndingStats.ful.length, href: getWordsEndingFulUrl() },
  { key: 'less', label: t('stats.less_words'), count: wordEndingStats.less.length, href: getWordsEndingLessUrl() },
].filter(item => item.count > 0);

const hasLetterPatterns = letterPatternItems.length > 0;
const hasWordEndings = wordEndingItems.length > 0;

// Build data arrays for DefinitionList
const basicStatsItems = [
  { label: t('stats.total_words'), value: totalWords, href: getWordsUrl() },
  ...(lengthCount > 0 ? [{ label: t('stats.word_lengths'), value: lengthCount, href: getWordsLengthUrl() }] : []),
  ...(milestoneCount > 0 ? [{ label: t('stats.milestone_words'), value: milestoneCount, href: getMilestoneWordsUrl() }] : [])
];

// Basic word items that should render as word links
const basicWordItems = [
  ...(firstWord ? [{ label: t('stats.first_word'), value: firstWord }] : []),
  ...(latestWord ? [{ label: t('stats.latest_word'), value: latestWord }] : [])
];

const streakItems = [
  {
    label: t('stats.current_streak'),
    value: t('stats.days', { count: streakStats.currentStreak }),
    ...(streakStats.currentStreak > 0 ? { href: getCurrentStreakUrl() } : {})
  },
  {
    label: t('stats.longest_streak'),
    value: t('stats.days', { count: streakStats.longestStreak }),
    ...(streakStats.longestStreak > 0 ? { href: getLongestStreakUrl() } : {})
  },
  ...(antiStreakStats.longestGap > 0 ? [{
    label: t('stats.longest_gap'),
    value: t('stats.days', { count: antiStreakStats.longestGap })
  }] : [])
];

// Word facts items that should render as word links
const wordFactsWordItems = [
  ...(wordStats.shortest ? [{ label: t('stats.shortest', { length: wordStats.shortest.word.length }), value: wordStats.shortest }] : []),
  ...(wordStats.longest ? [{ label: t('stats.longest', { length: wordStats.longest.word.length }), value: wordStats.longest }] : []),
  ...(leastSyllables ? [{ label: t('stats.least_syllables', { count: leastSyllablesCount }), value: leastSyllables }] : []),
  ...(mostSyllables ? [{ label: t('stats.most_syllables', { count: mostSyllablesCount }), value: mostSyllables }] : []),
  ...(mostVowels ? [{ label: t('stats.most_vowels', { count: mostVowelsCount }), value: mostVowels }] : []),
  ...(mostConsonants ? [{ label: t('stats.most_consonants', { count: mostConsonantsCount }), value: mostConsonants }] : [])
];

// Word facts items that should render as regular links/values
const wordFactsRegularItems = [
  ...(letterStats.length > 0 ? [
    { label: t('stats.most_common_letter', { count: mostCommonLetterCount }), value: mostCommonLetter, href: getMostCommonLetterUrl() },
    { label: t('stats.least_common_letter', { count: leastCommonLetterCount, plural: leastCommonLetterPlural }), value: leastCommonLetter, href: getLeastCommonLetterUrl() }
  ] : []),
  ...(palindromeCount > 0 ? [{ label: t('stats.palindromes'), value: palindromeCount, href: getPalindromesUrl() }] : []),
  ...(allConsonants.length > 0 ? [{ label: t('stats.all_consonants'), value: allConsonants.length, href: getAllConsonantsUrl() }] : []),
  ...(allVowels.length > 0 ? [{ label: t('stats.all_vowels'), value: allVowels.length, href: getAllVowelsUrl() }] : [])
];

const { title, description, secondaryText } = getPageMetadata(Astro.url.pathname);
---
<Layout title={title} description={description}>
  <main class="stats">
    <Heading text={title} secondaryText={secondaryText} />
    <DescriptionText text={description} />

    <StatsSection title={t('stats.overview_heading')}>
      <DefinitionList items={basicStatsItems} />
      <DefinitionList items={basicWordItems} valueType="word" />
    </StatsSection>

    <StatsSection title={t('stats.word_facts_heading')} href={getWordFactsUrl()}>
      <DefinitionList items={wordFactsWordItems} valueType="word" />
      <DefinitionList items={wordFactsRegularItems} />
    </StatsSection>

    <StatsSection title={t('stats.streaks_heading')} href={getStreaksUrl()}>
      <DefinitionList items={streakItems} />
      
      {antiStreakStats.longestGap > 0 && (
        <dl class="stats__list">
          <dt class="stats__fact">{t('stats.streak_vs_gap')}</dt>
          <dd class="stats__value stats__chart">
            <BarChart 
              currentValue={streakStats.longestStreak}
              maxValue={antiStreakStats.longestGap}
              currentLabel={t('stats.best', { count: streakStats.longestStreak })}
              maxLabel={t('stats.worst', { count: antiStreakStats.longestGap })}
              variant="comparison"
            />
          </dd>
        </dl>
      )}
    </StatsSection>

{hasLetterPatterns && (
      <StatsSection title={t('stats.letter_patterns_heading')} href={getLetterPatternsUrl()}>
        <DefinitionList items={letterPatternItems.map(item => ({
          label: item.label,
          value: item.count,
          href: item.href
        }))} />
      </StatsSection>
    )}

{hasWordEndings && (
      <StatsSection title={t('stats.word_endings_heading')} href={getWordEndingsUrl()}>
        <DefinitionList items={wordEndingItems.map(item => ({
          label: item.label,
          value: item.count,
          href: item.href
        }))} />
      </StatsSection>
    )}
  </main>
</Layout>

<style>
    .stats {
        max-width: var(--content-width-medium);
        margin: 0 auto;
    }

    .stats__section {
        margin-bottom: var(--spacing-large);
    }

    .stats__heading {
        font-size: var(--font-size-base);
        margin-bottom: var(--spacing-base);
        color: var(--color-text-primary);
        border-bottom: 1px solid var(--color-text-primary);
        padding-bottom: 0.5rem;
    }

    .stats__list {
        display: flex;
        flex-direction: column;
        gap: var(--spacing-small);
    }

    .stats__fact {
        color: var(--color-text-light);
        margin: 0;
        padding-top: var(--spacing-small);
    }

    .stats__value {
        font-size: 1.1rem;
        font-weight: 500;
        text-align: right;
        min-width: 0;
        margin: 0;
        padding-bottom: var(--spacing-small);
        border-bottom: 1px solid var(--color-border);
        margin-bottom: var(--spacing-small);
    }

    .stats__link {
        color: var(--color-text-primary);
        text-decoration: none;
        transition: opacity 0.2s ease;
    }

    .stats :global(time) {
        color: var(--color-text-light);
        font-size: 0.8rem;
        font-weight: normal;
        margin: 0;
    }

    @media (min-width: 1025px) {
        .stats__list {
            display: grid;
            grid-template-columns: 1fr auto;
            column-gap: 1rem;
            row-gap: 0;
            align-items: baseline;
        }

        .stats__fact {
            padding-top: 0;
            padding-bottom: var(--spacing-small);
            border-bottom: 1px solid var(--color-border);
        }

        .stats__value {
            padding-top: 0;
            padding-bottom: var(--spacing-small);
            border-bottom: 1px solid var(--color-border);
            margin-bottom: 0;
        }

        .stats__chart {
            grid-column: 1 / -1;
            text-align: left;
        }
    }
</style>
