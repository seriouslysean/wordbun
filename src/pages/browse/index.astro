---
import { getPageMetadata } from '~astro-utils/page-metadata.ts';
import { STRUCTURED_DATA_TYPE } from '~astro-utils/schema-utils.ts';
import { getWordsFromCollection, groupWordsByYear, groupWordsByLetter, groupWordsByLength, groupWordsByPartOfSpeech } from '~astro-utils/word-data-utils';
import { getWordsYearUrl, getLetterUrl, getLengthUrl, getPartOfSpeechUrl, getWordsUrl, getWordsLetterUrl, getWordsLengthUrl, getWordsPartOfSpeechUrl, getWordsYearIndexUrl } from '~astro-utils/url-utils';
import Heading from '~components/Heading.astro';
import SectionHeading from '~components/SectionHeading.astro';
import SiteLink from '~components/SiteLink.astro';
import WordSection from '~components/WordSection.astro';
import RandomWordLink from '~components/RandomWordLink.astro';
import Layout from '~layouts/Layout.astro';
import { t, tp } from '~utils/i18n-utils';

const allWords = await getWordsFromCollection();
const wordsByYear = groupWordsByYear(allWords);
const wordsByLetter = groupWordsByLetter(allWords);
const wordsByLength = groupWordsByLength(allWords);
const wordsByPartOfSpeech = groupWordsByPartOfSpeech(allWords);

// Get recent words (last 20)
const recentWords = allWords.slice(0, 20);

const sortedYearEntries = Object.entries(wordsByYear).reverse();
const sortedLetterEntries = Object.entries(wordsByLetter).sort();
const sortedLengthEntries = Object.entries(wordsByLength).sort((a, b) => parseInt(a[0]) - parseInt(b[0]));
const sortedPartOfSpeechEntries = Object.entries(wordsByPartOfSpeech).sort();

const { title, description, secondaryText } = getPageMetadata(Astro.url.pathname);
---

<Layout title={title} description={description} structuredDataType={STRUCTURED_DATA_TYPE.WORD_LIST}>
  <Heading text={title} secondaryText={secondaryText} />
  
  {recentWords.length > 0 && (
    <section class="browse__section">
      <SectionHeading text={t('browse.recent')} href={getWordsUrl()} />
      <WordSection words={recentWords} columns={3} />
    </section>
  )}

  <section class="browse__section">
    <SectionHeading text={t('browse.by_year')} href={getWordsYearIndexUrl()} />
    <div class="browse__grid">
      {sortedYearEntries.map(([year, words]) => (
        <SiteLink
          href={getWordsYearUrl(year)}
          variant="primary"
          class="browse__grid-item"
          title={t('common.title_from_context', { count: words.length, value: year })}
        >
          {year}
        </SiteLink>
      ))}
    </div>
  </section>

  <section class="browse__section">
    <SectionHeading text={t('browse.by_letter')} href={getWordsLetterUrl()} />
    <div class="browse__grid">
      {sortedLetterEntries.map(([letter, words]) => (
        <SiteLink 
          href={getLetterUrl(letter)} 
          variant="primary"
          class="browse__grid-item"
          title={t('common.title_starting_with', { count: words.length, value: letter.toUpperCase() })}
        >
          {letter.toUpperCase()}
        </SiteLink>
      ))}
    </div>
  </section>

  <section class="browse__section">
    <SectionHeading text={t('browse.by_length')} href={getWordsLengthUrl()} />
    <div class="browse__grid">
      {sortedLengthEntries.map(([length, words]) => (
        <SiteLink 
          href={getLengthUrl(length)} 
          variant="primary"
          class="browse__grid-item"
          title={t('common.title_with_length', { count: words.length, value: length })}
        >
          {tp('common.letters', length)}
        </SiteLink>
      ))}
    </div>
  </section>

  <section class="browse__section">
    <SectionHeading text={t('browse.by_part_of_speech')} href={getWordsPartOfSpeechUrl()} />
    <div class="browse__grid">
      {sortedPartOfSpeechEntries.map(([partOfSpeech, words]) => (
        <SiteLink 
          href={getPartOfSpeechUrl(partOfSpeech)} 
          variant="primary"
          class="browse__grid-item"
          title={t('common.title_with_part_of_speech', { count: words.length, value: partOfSpeech })}
        >
          {t(`parts_of_speech.${partOfSpeech}`)}
        </SiteLink>
      ))}
    </div>
  </section>

  <section class="browse__section">
    <SectionHeading text={t('browse.discovery')} />
    <div class="browse__grid">
      <RandomWordLink variant="secondary" class="browse__grid-item" />
    </div>
  </section>
</Layout>

<style>
  .browse__section {
    margin-bottom: var(--spacing-large);
  }

  .browse__grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));
    gap: 0.5rem;
    margin: 1rem 0;
  }

  .browse__grid-item {
    padding: 0.5rem 1rem;
    text-align: center;
    text-decoration: none;
  }

  @media (min-width: 768px) {
    .browse__grid {
      grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
    }
  }

</style>